// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É Telegraf
const { Telegraf } = require('telegraf');

// –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
const bot = new Telegraf('7736883201:AAGRReUAG-XmTqUBnMW445CP78agvsUj2lY');

// –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
const userLanguage = {};

// ID –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const blockedUsers = new Set();

// ID –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
const cachedVideoFileId = 'BAACAgIAAxkDAAOdZ3tAj74IJpAL-AWjGSBatMDH0SMAAnZbAAKgQ-BLXCb6NEpxvAs2BA';

// –ü–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞
const translations = {
  en: {
    welcome: 'Welcome to ESTET Girls Private üí¶',
    preview: 'Here is a sneak peek of what you‚Äôll find in the private channel üîû',
    choosePlan: 'Quickly select the desired subscription plan üçå',
    tariffs: 'To view the subscription plan, press the corresponding button',
    payPrompt: 'üíÅüèª‚Äç‚ôÇÔ∏è Did you pay?\n\nüëåüèª Then send the payment receipt here as an image (not a document): screenshot or photo.\n\nThe receipt must clearly show: <b>date, time, and amount.</b>\n__________________________\n<i>You may be blocked for spamming!</i>',
    paymentConfirmed: 'Thank you! Your payment is being verified.',
    subscriptionChosen: 'You have chosen the subscription:',
    paymentDetails: 'Payment details:',
    cryptoPayment: 'Payment to cryptocurrency ‚ù§Ô∏è',
    disclaimer: 'You are paying to an individual. Funds will be transferred to the recipient\'s account.',
    plans: {
      '1_month': '1 month',
      '3_months': '3 months',
      '6_months': '6 months',
      '12_months': '12 months',
      lifetime: 'lifetime',
    },
    back: 'Back',
    paid: 'Paid üéÅ',
  },
  ru: {
    welcome: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ ESTET Girls Private üí¶',
    preview: '–¢–≤–æ–µ–º—É –≤–Ω–∏–º–∞–Ω–∏—é –Ω–µ–±–æ–ª—å—à–æ–µ –ø—Ä–µ–≤—å—é —Ç–æ–≥–æ, —á—Ç–æ –Ω–∞–π–¥–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ üîû',
    choosePlan: '–°–∫–æ—Ä–µ–π –≤—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—ã–π —Ç–∞—Ä–∏—Ñ üçå',
    tariffs: '–ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–∞—Ä–∏—Ñ–æ–º, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É',
    payPrompt: 'üíÅüèª‚Äç‚ôÇÔ∏è –û–ø–ª–∞—Ç–∏–ª–∏?\n\nüëåüèª –¢–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ –∫–∞—Ä—Ç–∏–Ω–∫–æ–π (–Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º!) –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –ø–ª–∞—Ç–µ–∂–∞: —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Ñ–æ—Ç–æ.\n\n–ù–∞ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–µ—Ç–∫–æ –≤–∏–¥–Ω—ã: <b>–¥–∞—Ç–∞, –≤—Ä–µ–º—è –∏ —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞.</b>\n__________________________\n<i>–ó–∞ —Å–ø–∞–º –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!</i>',
    paymentConfirmed: '–°–ø–∞—Å–∏–±–æ! –í–∞—à –ø–ª–∞—Ç–µ–∂ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è.',
    subscriptionChosen: '–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É:',
    paymentDetails: '–†–µ–∫–≤–∏–∑–∏—Ç—ã:',
    cryptoPayment: '–û–ø–ª–∞—Ç–∞ –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É ‚ù§Ô∏è',
    disclaimer: '–í—ã –ø–ª–∞—Ç–∏—Ç–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–º—É –ª–∏—Ü—É. –¥–µ–Ω—å–≥–∏ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ —Å—á—ë—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è.',
    plans: {
      '1_month': '1 –º–µ—Å—è—Ü',
      '3_months': '3 –º–µ—Å—è—Ü–∞',
      '6_months': '6 –º–µ—Å—è—Ü–µ–≤',
      '12_months': '12 –º–µ—Å—è—Ü–µ–≤',
      lifetime: '–Ω–∞–≤—Å–µ–≥–¥–∞',
    },
    back: '–ù–∞–∑–∞–¥',
    paid: '–û–ø–ª–∞—Ç–∏–ª üéÅ',
  },
  es: {
    welcome: 'Bienvenido a ESTET Girls Private üí¶',
    preview: 'Aqu√≠ tienes un adelanto de lo que encontrar√°s en el canal privado üîû',
    choosePlan: '¬°Elige r√°pidamente el plan de suscripci√≥n que deseas! üçå',
    tariffs: 'Para consultar el plan de suscripci√≥n, presiona el bot√≥n correspondiente',
    payPrompt: 'üíÅüèª‚Äç‚ôÇÔ∏è ¬øHas pagado?\n\nüëåüèª Entonces env√≠a aqu√≠ la captura del recibo de pago como una imagen (no como un documento): captura de pantalla o foto.\n\nEl recibo debe mostrar claramente: <b>fecha, hora y monto.</b>\n__________________________\n<i>¬°Podr√≠as ser bloqueado por spam!</i>',
    paymentConfirmed: '¬°Gracias! Su pago est√° siendo verificado.',
    subscriptionChosen: 'Has elegido la suscripci√≥n:',
    paymentDetails: 'Detalles de pago:',
    cryptoPayment: 'Pago a criptomoneda ‚ù§Ô∏è',
    disclaimer: 'Est√°s pagando a un individuo. Los fondos ser√°n transferidos a la cuenta del destinatario.',
    plans: {
      '1_month': '1 mes',
      '3_months': '3 meses',
      '6_months': '6 meses',
      '12_months': '12 meses',
      lifetime: 'de por vida',
    },
    back: 'Atr√°s',
    paid: 'Pagado üéÅ',
  },
  fr: {
    welcome: 'Bienvenue sur ESTET Girls Private üí¶',
    preview: 'Voici un aper√ßu de ce que vous trouverez dans le canal priv√© üîû',
    choosePlan: 'Choisissez rapidement l‚Äôabonnement souhait√© üçå',
    tariffs: 'Pour consulter le plan d‚Äôabonnement, appuyez sur le bouton correspondant',
    payPrompt: 'üíÅüèª‚Äç‚ôÇÔ∏è Avez-vous pay√©?\n\nüëåüèª Ensuite, envoyez ici une capture d‚Äô√©cran ou une photo du re√ßu de paiement.\n\nLe re√ßu doit montrer clairement¬†: <b>date, heure et montant.</b>\n__________________________\n<i>Vous risquez d‚Äô√™tre bloqu√© pour spam¬†!</i>',
    paymentConfirmed: 'Merci! Votre paiement est en cours de v√©rification.',
    subscriptionChosen: 'Vous avez choisi l\'abonnement :',
    paymentDetails: 'D√©tails de paiement :',
    cryptoPayment: 'Paiement en cryptomonnaie ‚ù§Ô∏è',
    disclaimer: 'Vous payez √† un particulier. Les fonds seront transf√©r√©s sur le compte du destinataire.',
    plans: {
      '1_month': '1 mois',
      '3_months': '3 mois',
      '6_months': '6 mois',
      '12_months': '12 mois',
      lifetime: '√† vie',
    },
    back: 'Retour',
    paid: 'Pay√© üéÅ',
  },
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.start((ctx) => {
  ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose your language:', {
    reply_markup: {
      inline_keyboard: [
        [{ text: '–†—É—Å—Å–∫–∏–π üá∑üá∫', callback_data: 'lang_ru' }],
        [{ text: 'English üá∫üá∏', callback_data: 'lang_en' }],
        [{ text: 'Espa√±ol üá™üá∏', callback_data: 'lang_es' }],
        [{ text: 'Fran√ßais üá´üá∑', callback_data: 'lang_fr' }],
      ],
    },
  });
});

// –í—ã–±–æ—Ä —è–∑—ã–∫–∞
bot.on('callback_query', async (ctx) => {
  try {
    const data = ctx.callbackQuery.data;

    if (data.startsWith('lang_')) {
      const lang = data.split('_')[1];
      userLanguage[ctx.from.id] = lang;

      const t = translations[lang];
      await ctx.replyWithVideo(cachedVideoFileId);
      await ctx.reply(`${t.welcome}\n${t.preview}\n${t.choosePlan}`);

      await ctx.reply(t.tariffs, {
        reply_markup: {
          inline_keyboard: [
            [
              { text: t.plans['1_month'], callback_data: '1_month' },
              { text: t.plans['3_months'], callback_data: '3_months' },
            ],
            [
              { text: t.plans['6_months'], callback_data: '6_months' },
              { text: t.plans['12_months'], callback_data: '12_months' },
            ],
            [{ text: t.plans['lifetime'], callback_data: 'lifetime' }],
          ],
        },
      });
    }

    const lang = userLanguage[ctx.from.id] || 'en';
    const t = translations[lang];

    if (['1_month', '3_months', '6_months', '12_months', 'lifetime'].includes(data)) {
      await ctx.editMessageText(
        `<b>${t.subscriptionChosen}</b> ${t.plans[data]}\n\n` +
          `<b>${t.paymentDetails}</b>\n\n<b>USDT TRC20:</b> <code>TGDWr5t78oChmoyTRk9PRNYzdGhVKNoHao</code>\n\n` +
          `<b>${t.cryptoPayment}</b>\n\n` +
          `__________________________\n` +
          `<i>${t.disclaimer}</i>`,
        {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [
                { text: t.paid, callback_data: 'paid' },
                { text: t.back, callback_data: `lang_${lang}` },
              ],
            ],
          },
        }
      );
    } else if (data === 'paid') {
      await ctx.reply(t.payPrompt, { parse_mode: 'HTML' });
    }
  } catch (err) {
    console.error('Error handling callback_query:', err);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
bot.on('photo', async (ctx) => {
  const userId = ctx.from.id.toString();
  const lang = userLanguage[ctx.from.id] || 'ru';
  const t = translations[lang];
  const adminId = '94694611';

  if (blockedUsers.has(userId)) {
    return ctx.reply('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏, —Ç–∞–∫ –∫–∞–∫ –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.');
  }

  try {
    const username = ctx.from.username || '–ë–µ–∑ –∏–º–µ–Ω–∏';

    console.log(`User ID: ${userId}, Username: ${username}`);

    await ctx.telegram.sendMessage(
      adminId,
      `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} (ID: ${userId}) –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–≤–∏—Ç–∞–Ω—Ü–∏—é.`
    );

    await ctx.telegram.forwardMessage(adminId, ctx.chat.id, ctx.message.message_id);

    await ctx.reply(t.paymentConfirmed);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ:', err);
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–≤–∏—Ç–∞–Ω—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.command('notify', async (ctx) => {
  const adminId = '94694611';
  if (ctx.from.id.toString() !== adminId) {
    return ctx.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
  }

  const args = ctx.message.text.split(' ').slice(1);
  if (args.length < 2) {
    return ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /notify <user_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>');
  }

  const userId = args[0];
  const message = args.slice(1).join(' ');

  try {
    await bot.telegram.sendMessage(userId, `‚ùóÔ∏è ${message}`);
    ctx.reply('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.');
  } catch (error) {
    console.error('Error sending message:', error);
    ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.command('block', async (ctx) => {
  const adminId = '94694611';
  if (ctx.from.id.toString() !== adminId) {
    return ctx.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
  }

  const args = ctx.message.text.split(' ').slice(1);
  if (args.length < 1) {
    return ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /block <user_id>');
  }

  const userId = args[0];
  blockedUsers.add(userId);
  ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.command('unblock', async (ctx) => {
  const adminId = '94694611';
  if (ctx.from.id.toString() !== adminId) {
    return ctx.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
  }

  const args = ctx.message.text.split(' ').slice(1);
  if (args.length < 1) {
    return ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /unblock <user_id>');
  }

  const userId = args[0];
  blockedUsers.delete(userId);
  ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –±—ã–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
bot.command('blocked', async (ctx) => {
    const adminId = '94694611'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID
    if (ctx.from.id.toString() !== adminId) {
        return ctx.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
    }

    if (blockedUsers.size === 0) {
        return ctx.reply('–°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.');
    }

    let blockedList = '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n';
    blockedUsers.forEach((userId) => {
        blockedList += `- ID: ${userId}\n`;
    });

    await ctx.reply(blockedList);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch();

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
